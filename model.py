# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pAWHdmNHAc9hnOSQ91ncXexE5kUPGkP-
"""

# Install necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import nltk
import pickle
import os
from tqdm.notebook import tqdm
from transformers import AutoTokenizer, AutoModelForSequenceClassification
from scipy.special import softmax

# Download NLTK resources
nltk.download('vader_lexicon')
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
nltk.download('maxent_ne_chunker')
nltk.download('words')

# Read in data
df = pd.read_csv('/content/Reviews.csv')
print(df.shape)
df = df.head(500)
print(df.shape)
df.head()

# Plotting count of reviews by stars
ax = df['Score'].value_counts().sort_index().plot(kind='bar', title='Count of Reviews by Stars', figsize=(10, 5))
ax.set_xlabel('Review Stars')
plt.show()

# Example review text for processing
example = df['Text'][50]
print(example)

# Function to get RoBERTa sentiment scores
def polarity_scores_roberta(example):
    encoded_text = tokenizer(example, return_tensors='pt')
    output = model(**encoded_text)
    scores = output[0][0].detach().numpy()
    scores = softmax(scores)
    scores_dict = {
        'roberta_neg': scores[0],
        'roberta_neu': scores[1],
        'roberta_pos': scores[2]
    }
    return scores_dict

# Load or initialize models and tokenizer
if os.path.exists('vader_analyzer.pkl') and os.path.exists('roberta_model.pkl'):
    with open('vader_analyzer.pkl', 'rb') as f:
        sia = pickle.load(f)
    with open('roberta_model.pkl', 'rb') as f:
        model = pickle.load(f)
    with open('roberta_tokenizer.pkl', 'rb') as f:
        tokenizer = pickle.load(f)
else:
    from nltk.sentiment import SentimentIntensityAnalyzer
    sia = SentimentIntensityAnalyzer()
    MODEL = f"cardiffnlp/twitter-roberta-base-sentiment"
    tokenizer = AutoTokenizer.from_pretrained(MODEL)
    model = AutoModelForSequenceClassification.from_pretrained(MODEL)
    with open('vader_analyzer.pkl', 'wb') as f:
        pickle.dump(sia, f)
    with open('roberta_model.pkl', 'wb') as f:
        pickle.dump(model, f)
    with open('roberta_tokenizer.pkl', 'wb') as f:
        pickle.dump(tokenizer, f)

# Check for precomputed results
if os.path.exists('sentiment_results.pkl'):
    results_df = pd.read_pickle('sentiment_results.pkl')
else:
    res = {}
    for i, row in tqdm(df.iterrows(), total=len(df)):
        try:
            text = row['Text']
            myid = row['Id']
            vader_result = sia.polarity_scores(text)
            vader_result_rename = {f"vader_{k}": v for k, v in vader_result.items()}
            roberta_result = polarity_scores_roberta(text)
            both = {**vader_result_rename, **roberta_result}
            res[myid] = both
        except RuntimeError:
            print(f'Broke for id {myid}')
    results_df = pd.DataFrame(res).T
    results_df = results_df.reset_index().rename(columns={'index': 'Id'})
    results_df = results_df.merge(df, how='left')
    results_df.to_pickle('sentiment_results.pkl')

# Visualizations
ax = sns.barplot(data=results_df, x='Score', y='vader_compound')
ax.set_title('Compound Score by Amazon Star Review')
plt.show()

fig, axs = plt.subplots(1, 3, figsize=(12, 3))
sns.barplot(data=results_df, x='Score', y='vader_pos', ax=axs[0])
sns.barplot(data=results_df, x='Score', y='vader_neu', ax=axs[1])
sns.barplot(data=results_df, x='Score', y='vader_neg', ax=axs[2])
axs[0].set_title('Positive')
axs[1].set_title('Neutral')
axs[2].set_title('Negative')
plt.tight_layout()
plt.show()

# Pairplot of sentiment scores
sns.pairplot(data=results_df,
             vars=['vader_neg', 'vader_neu', 'vader_pos',
                  'roberta_neg', 'roberta_neu', 'roberta_pos'],
             hue='Score', palette='tab10')
plt.show()

# Testing sentiment analysis with Hugging Face pipeline
from transformers import pipeline
sent_pipeline = pipeline("sentiment-analysis")
print(sent_pipeline('I love sentiment analysis!'))
print(sent_pipeline('Make sure to like and subscribe!'))
print(sent_pipeline('booo'))

!pip install flask flask-ngrok